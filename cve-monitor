#!/usr/bin/python3

import argparse
import jinja2
import json
import logging
import re
import requests
import subprocess
import sqlite3
import datetime
import sys

logging.basicConfig(level=logging.DEBUG)

# Templates
CVEURL = "https://cve.mitre.org/cgi-bin/cvename.cgi?name=%s"
OUTPUT = jinja2.Template("""{%- for vuln in results -%}
{{ results[vuln]["cve"]["id"] }} -- {{ results[vuln]["status"] }}
{% if results[vuln]["status"] == "Failed" %}    Summary: {{ results[vuln]["cve"]["summary"] }}
    URL: {{ results[vuln]["url"] }}
    Affected Packages:{% for pkg in results[vuln]["packages"] %}
        - {{ pkg }}{% endfor %}
{% else %}
{%- endif -%}
{%- endfor -%}""")

URL = { "LAST": "https://cve.circl.lu/api/last", "BY_ID": "https://cve.circl.lu/api/cve/%s" } 
RESULT = {}
    
class CVEDB():
    def __init__(self):
        database = "cvemon.db"
        self.connection = sqlite3.connect(database)
        self.cursor = self.connection.cursor()
        CVEDB_init = """CREATE TABLE IF NOT EXISTS main.cve (
                        id INTEGER PRIMARY KEY,
                        name TEXT NOT NULL,
                        cve BLOB NOT NULL,
                        is_vuln BOOL NOT NULL,
                        recv_date TEXT NOT NULL,
                        last_seen TEXT NOT NULL);"""
        self.run_cmd(CVEDB_init)

    def addCVERow(self, row):
        logging.debug("Inserting %s" % row[0])
        cmd = "INSERT INTO main.cve (id, name, cve, is_vuln, recv_date, last_seen) VALUES (NULL, ?, ?, ?, ?, ?)"
        self.cursor.execute(cmd, row)
        self.connection.commit()

    def run_cmd(self, cmd, data=None):
        if data:
            output = self.cursor.execute(cmd, data)
        else:
            output = self.cursor.execute(cmd)

        self.connection.commit()
        return(output)

    def updateCVERow(self, row):
        # Update the row record
        logging.debug("Updating %s" % row[0])
        cmd = "UPDATE main.cve SET last_scan = %s WHERE name = %s" % (row[-1], row[0])
        self.run_cmd('''UPDATE main.cve SET last_seen = :LAST WHERE name = :NAME''', { "LAST": row[-1], "NAME": row[0] })

def genPkgIndex():
    # Fetch all packages installed on this system
    logging.info("Building Package Index...")
    return subprocess.check_output(["dpkg-query", "-W", "-f=${Package}:${Version}\n"]).decode('utf-8').strip().split('\n')

def scanCVE(db, index, known_vulns, vuln):
    # Scan the index for package + versions mentioned in the CVE provided
    logging.info("Scanning for %s" % (vuln["id"]))
    affected_packages = []
    for package in vuln["vulnerable_product"]:
        p = package.split(":")
        pkg = re.compile(p[4] + "*")
        r = list(filter(pkg.match, index))
        if len(r) > 0:
            for item in r:
                if item not in affected_packages:
                    logging.info("CVE detected!")
                    affected_packages.append(item)
    # Append results, if any, to RESULT
    now = datetime.datetime.now().isoformat()
    if len(affected_packages) > 0:
        if vuln["id"] in known_vulns:
            db.updateCVERow([vuln["id"], json.dumps(vuln), True, now, now])
        else:
            db.addCVERow([vuln["id"], json.dumps(vuln), True, now, now])
        #RESULT[vuln["id"]] = {"status": "Failed", "packages": affected_packages, "url": CVEURL % vuln["id"], "cve": vuln}

    else:
        if vuln["id"] in known_vulns:
            db.updateCVERow([vuln["id"], json.dumps(vuln), False, now, now])
        else:
            db.addCVERow([vuln["id"], json.dumps(vuln), False, now, now])
        #RESULT[vuln["id"]] = {"status": "Passed", "url": CVEURL % vuln["id"], "cve": vuln}

def showCVE(vuln):
    # Dump Vulnerability data
    # TODO: Maybe provide a way to generate jinja2 reports on CVEs from file.
    j = jinja2.Template("""{{ vuln["id"] }}: {{ vuln["summary"] }}
    """)

    print(j.render(vuln=vuln))

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Scan system for CVE affected Packages")
    parser.add_argument('--failures', action='store_true', help="Show failures")
    parser.add_argument('--id', help="Evaluate for a specific CVE")
    parser.add_argument('--show', action='store_true', help="Show CVE Details")
    args = parser.parse_args()
    
    db = CVEDB()
    
    # Get a list of known vulnerabilities
    known_vulns = [ name[0] for name in db.run_cmd("SELECT name FROM main.cve;").fetchall() ]
    
    
    if args.failures:
        for vuln in db.run_cmd('''SELECT name, cve, last_seen FROM main.cve WHERE is_vuln = True;''').fetchall():
            summary = json.loads(vuln[1])["summary"]
            print("### %s:\n%s\n" % (vuln[0], summary))
        sys.exit(0)
    
    index = genPkgIndex()

    if not args.id:
        logging.info("Fetching latest vulnerabilities...")
        vulns = requests.get(URL["LAST"]).json()
        for vuln in vulns:
            if args.show:
                showCVE(vuln)
            else:
                # Have scanCVE return the object and we can work with it here.
                scanCVE(db, index, known_vulns, vuln)
    else:
        logging.info("Fetching Vulneratility: %s" % args.id)
        vuln = requests.get(URL["BY_ID"]%(args.id)).json()
        if args.show:
            showCVE(vuln)
        else:
            # Have scanCVE return the object and we can work with it here.
            scanCVE(db, index, vuln)

    if not args.show:
        for CVE in db.run_cmd("SELECT name FROM main.cve WHERE is_vuln = True").fetchall():
            print(CVE)
#        print(OUTPUT.render(results=RESULT))
