#!/usr/bin/python3

import argparse
import jinja2
import json
import logging
import re
import requests
import subprocess

logging.basicConfig(level=logging.ERROR)

# Templates
CVEURL = "https://cve.mitre.org/cgi-bin/cvename.cgi?name=%s"
OUTPUT = jinja2.Template("""{%- for vuln in results -%}
{{ results[vuln]["cve"]["id"] }} -- {{ results[vuln]["status"] }}
{% if results[vuln]["status"] == "Failed" %}    Summary: {{ results[vuln]["cve"]["summary"] }}
    URL: {{ results["url"] }}
    Affected Packages:{% for pkg in results[vuln]["packages"] %}
        - {{ pkg }}{% endfor %}
{% else %}
{%- endif -%}
{%- endfor -%}""")

URL = { "LAST": "https://cve.circl.lu/api/last", "BY_ID": "https://cve.circl.lu/api/cve/%s" } 
RESULT = {}

def genPkgIndex():
    # Fetch all packages installed on this system
    logging.info("Building Package Index...")
    return subprocess.check_output(["dpkg-query", "-W", "-f=${Package}:${Version}\n"]).decode('utf-8').strip().split('\n')

def scanCVE(index, vuln):
    # Scan the index for package + versions mentioned in the CVE provided
    logging.info("Scanning for %s" % (vuln["id"]))
    affected_packages = []
    for package in vuln["vulnerable_product"]:
        p = package.split(":")
        pkg = re.compile(p[4] + "*")
        r = list(filter(pkg.match, index))
        if len(r) > 0:
            for item in r:
                if item not in affected_packages:
                    logging.debug("CVE detected!")
                    affected_packages.append(item)

    # Append results, if any, to RESULT
    if len(affected_packages) > 0:
        RESULT[vuln["id"]] = {"status": "Failed", "packages": affected_packages, "url": CVEURL % vuln["id"], "cve": vuln}
    else:
        RESULT[vuln["id"]] = {"status": "Passed", "url": CVEURL % vuln["id"], "cve": vuln}

def showCVE(vuln):
    # Dump Vulnerability data
    # TODO: Maybe provide a way to generate jinja2 reports on CVEs from file.
    j = jinja2.Template("""{{ vuln["id"] }}: {{ vuln["summary"] }}
    """)

    print(j.render(vuln=vuln))

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Scan system for CVE affected Packages")
    parser.add_argument('--id', help="Evaluate for a specific CVE")
    parser.add_argument('--show', action='store_true', help="Show CVE Details")
    args = parser.parse_args()
    
    index = genPkgIndex()

    if not args.id:
        logging.info("Fetching latest vulnerabilities...")
        vulns = json.loads(requests.get(URL["LAST"]).content.decode('utf-8'))
        for vuln in vulns:
            if args.show:
                showCVE(vuln)
            else:
                scanCVE(index, vuln)
    else:
        logging.info("Fetching Vulneratility: %s" % args.id)
        vuln = json.loads(requests.get(URL["BY_ID"]%(args.id)).content.decode('utf-8'))
        if args.show:
            showCVE(vuln)
        else:
            scanCVE(index, vuln)

    if not args.show:
        print(OUTPUT.render(results=RESULT))
