#!/usr/bin/python3

import argparse
import jinja2
import json
import logging
import re
import requests
import subprocess
import sqlite3
import datetime
import sys
import time

logging.basicConfig(level=logging.INFO)

# Templates
GH_CVE_PROJ = "CVEProject"
GH_CVE_REPO = "cvelist"
GH_API = "https://api.github.com"
RAW_URL = "https://raw.githubusercontent.com/%s/%s/master" % (GH_CVE_PROJ, GH_CVE_REPO)
CURRENT_HASH = "1d6700e49cbba3edf2ad531665d9ea149ab24296"

def fetch_vuln(vuln):
    """ Fetch vulnerability by name """
    vuln_data = requests.get("%s/%s"%(RAW_URL, vuln))
    return vuln_data.json()

def fetch_updates():
    """ Fetch all added CVE updates since the last checked commit by hash """
    if args.token:
        token_file = open(args.token, "r")
        my_token = token_file.readlines()[0].rstrip()
        head = {"Authorization": "token " + my_token }
    else:
        head = {}

    repo_data = requests.get(GH_API + "/repos/" + GH_CVE_PROJ + "/" + GH_CVE_REPO, headers=head).json()
    newest_commit = requests.get(repo_data["commits_url"].replace('{/sha}', "/master"), headers=head).json()["sha"]
    if newest_commit != CURRENT_HASH:
        compare = requests.get(repo_data["compare_url"].replace('{base}...{head}', "%s...%s"%(CURRENT_HASH, newest_commit)), headers=head).json()
    else:
        print("Vulnerability scanning up to date")
        sys.exit(0)
    
    cve_check_list = {}
    for cve in compare['files']:
        vuln = fetch_vuln(cve['filename'])
        if vuln['CVE_data_meta']['STATE'] != "PUBLIC":
            continue

        cve_check_list[cve['filename']] = vuln

    print(json.dumps(cve_check_list))

def genPkgIndex():
    # Fetch all packages installed on this system
    logging.info("Building Package Index...")
    return subprocess.check_output(["dpkg-query", "-W", "-f=${Package}:${Version}\n"]).decode('utf-8').strip().split('\n')

def scanCVE(db, index, vuln):
    # Scan the index for package + versions mentioned in the CVE provided
    logging.info("Scanning for %s" % (vuln["id"]))
    affected_packages = []
    for package in vuln["vulnerable_product"]:
        p = package.split(":")
        pkg = re.compile(p[4] + "*")
        ver = p[5]
        r = list(filter(pkg.match, index))
        if len(r) > 0:
            for item in r:
                if ver.find(item) != -1 and item not in affected_packages:
                    affected_packages.append(item)
    
    now = datetime.datetime.now().isoformat()
    if len(affected_packages) > 0:
        logging.warn("%s detected"%vuln["id"])
        db.updateCVERow([vuln["id"], json.dumps(vuln), True, now])
    else:
        db.updateCVERow([vuln["id"], json.dumps(vuln), False, now])

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="Scan system for CVE affected Packages")
    parser.add_argument('-t', '--token', help="GitHub Token")
    parser.add_argument('--debug', action='store_true', help="Debug Switch")

    actions = parser.add_mutually_exclusive_group()
    args = parser.parse_args()

    if args.debug:
        fetch_updates()
#    if args.scan:
#        index = genPkgIndex()
#        vulns = [ v for v in db.fetchVulns() if bool(v[2]) ]
#        if len(vulns) > 0:
#            for vuln in vulns:
#                if bool(vuln[2]):
#                    scanCVE(db, index, vuln[0])
#        else:
#            logging.info("No Active CVEs detected")
#
#    if args.show_vulns or args.show_all:
#        vulns = [ v for v in db.fetchVulns() ]
#        if args.show_vulns:
#            vulns = [ v for v in db.fetchVulns() if bool(v[2]) ]
#
#        table = [["CVE", "Severity", "Last Seen", "Vulnerable", "URL"]]
#
#        for vuln in vulns:
#            table.append([vuln[0]["id"], vuln[0]["cvss"], vuln[1], bool(vuln[2]), CVEURL%vuln[0]["id"]])
#        print_table(table) 
#
#    if args.show_cve:
#        showCVE([ v[0] for v in db.fetchVulns() if v[0]["id"] == args.show_cve ][0])
#        
